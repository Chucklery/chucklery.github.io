<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tools_Useage</title>
      <link href="/2024/09/20/Tools-Useage/"/>
      <url>/2024/09/20/Tools-Useage/</url>
      
        <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><h1 id="Aioxs"><a href="#Aioxs" class="headerlink" title="Aioxs"></a>Aioxs</h1><h1 id="Vant"><a href="#Vant" class="headerlink" title="Vant"></a>Vant</h1><h1 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element UI"></a>Element UI</h1><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Front ToolsUseage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题</title>
      <link href="/2024/09/20/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2024/09/20/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li><p>CPU 执行原理 以及冯诺依曼体系结构</p></li><li><p>说一下 LHS RHS 是什么</p></li><li><p>100T 文件如何遍历里面的信息?</p></li><li><p>介绍一下dll 文件</p></li><li><p>HTML 的字符实体是什么</p></li><li><p>js底层数据结构如何存储在V8里面</p></li><li><p>H5新特性</p></li><li><p>如果提到localstorage 就追问 localstorage API 以及 localStorage 实现原理 以及 localStorage 存在哪儿 以及localStorage 跨域</p></li><li><p>如果提到PWA技术 就追问 PWA优点 继续追问 Service Workers 继续追问 PWA和hybrid的不同</p></li><li><p>如果提到canvas 就追问 canvas 常用API</p></li><li><p>如果提到webSocket 就追问 webSocket 的用法 以及手动实现ws协议 继续追问SSE技术 和 ws的区别</p></li><li><p>如果提到webWorker 就追问 webWorker 用法 以及实现原理</p></li><li><p>浏览器如何跨tab页通讯？</p></li><li><p>如何区分强网弱网</p></li><li><p>什么是灰度</p></li><li><p>async defer</p></li><li><p>SEO</p></li><li><p>BFC</p></li><li><p>回流与重绘 以及优化方案</p></li><li><p>webComponents 以及 微前端 以及 emp 模块联邦</p></li><li><p>Css盒模型 和 怪异盒模型区别 以及统一策略</p></li><li><p>css 伪类</p></li><li><p>为什么哔哩哔哩用vmin 不用 vh</p></li><li><p>css变量</p></li><li><p>css flex grid</p></li><li><p>Css 动画 关键帧等</p></li><li><p>bem架构</p></li><li><p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？ 答：多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60*1000ms＝16.7ms</p></li><li><p>less scss 解决了什么问题</p></li><li><p>postCss 是干嘛的 是否用过 是否写过插件</p></li><li><p>是否用过tailwindCss 是否用过unoCss</p></li><li><p>typeOf null 是什么 原因是什么</p></li><li><p>比较两个对象是否相等</p></li><li><p>判断是不是数组</p></li><li><p>说说常用的es6</p></li><li><p>proxy Reflect 为什么要配合 proxy劫持 函数 劫持for in</p></li><li><p>迭代器 生成器 for of 以及 Iterator 以及数组解构原理 和对象解构原理（深入V8引擎）</p></li><li><p>Class 用法 super原理 继承 如何定义私有属性</p></li><li><p>AMD CMD UMD CJS ESM IIFE 的区别</p></li><li><p>Promise 静态方法 以及 all 实现原理 有限状态机</p></li><li><p>map set weakMap weakSet</p></li><li><p>微任务 宏任务 同步 异步 async await</p></li><li><p>装饰器 以及 装饰器解决了什么问题</p></li><li><p>ArrayBuffer 如何使用 以及跟webGl 的关系</p></li><li><p>讲一下 GLSL Shader 实现亮度(Brightness)、对比度(Contrast) 和边缘检测(Edge Detection) 是如何实现的回答的时候忘记了对比度的算法实现没答上来，讲了下明度 Luminance 的调节；亮度Brightness是RGB+亮度系数；边缘检测和图像锐化是使用 Convolution Kernel 卷积核加深中心像素与周围像素的色彩差值梯度，使边缘更加突出</p></li><li><p>计算机图形绘制原理</p></li><li><p>WebAssembly 工作原理 如何编译成wasm</p></li><li><p>webRTC 架构 如何 实现推流 拉流</p></li><li><p>垃圾回收 内存泄漏 堆栈</p></li><li><p>深拷贝 防抖 节流</p></li><li><p>实现深拷贝的几种方法 追问 对象群嵌套15层 我想用14层的一个属性 最优解决方案 引出 Immutable js 追问 Immutable js 实现原理 字典 位分区 及 树压缩算法</p></li><li><p>什么是纯函数 什么是副作用函数</p></li><li><p>浏览器输入一个url 发生了什么 DNS解析顺序 追问OSI 七层网络模型 三次握手 http https 区别 http1 2 3 区别 强缓存 协商缓存</p></li><li><p>TCP 跟 UDP 的区别</p></li><li><p>TCP 的 超时重传协议 滑动窗口思想</p></li><li><p>Ajax fetch navigator.sendBeacon 三个的区别</p></li><li><p>nodejs 是否用过</p></li><li><p>nodejs-napi addon</p></li><li><p>是否用过一些库 如 express koa nest 追问用的什么数据库 以及高速缓存 如 redis ，用的什么ORM框架，如果熟悉express 追问 中间件原理，熟悉nest 追问 ioc控制反转 DI 依赖注入 设计模式 以及MVC 架构 和MVVM 区别 继续追问nest rxjs 库用法 以及原理 继续追问nest 微服务 gRPC MQ 以及网关 。</p></li><li><p>聊聊数据库 mysql 底层数据结构 为什么使用B+ 树，继续追问 mysql事务以及四大特性 追问悲观锁和乐观锁</p></li><li><p>数据库的引擎？</p></li><li><p>聊聊redis redis是单线程还是多线程 以及底层原理</p></li><li><p>聊聊nodejs 的 vm虚拟机 以及PAI 以及 底层libuv openSSL</p></li><li><p>聊聊nodejs 子线程 进程守卫怎么做</p></li><li><p>聊聊 断点续传怎么做（前后端）</p></li><li><p>Npm 是什么 package-lock.json 是做什么的 npm 缓存原理</p></li><li><p>pnpm 实现原理 以及 monorepo 架构</p></li><li><p>如何发布 npm 包 有没有发过 自己的 npm包 周下载量多少</p></li><li><p>webpack vite rollup esbuild swc gulp</p></li><li><p>Webpack 脱口而出的配置 webpack 分包 webpack 打包优化 webpack打包原理 以及 HMR 原理</p></li><li><p>Vite原理 中间件原理 是否写过vite插件</p></li><li><p>rollup 和 webpack的区别</p></li><li><p>esBuild 常用命令 以及 为什么这么快</p></li><li><p>Vue2 3 区别</p></li><li><p>Diff算法 追问 最长递增子序列算法 以及 二分查找 和 贪心算法</p></li><li><p>响应式原理 追问 为什么使用位运算</p></li><li><p>Vue源码调度机制 以及nextTick执行机制</p></li><li><p>Vue3 新增2个内置组件 介绍</p></li><li><p>Vue3 keep-alive LRU 算法以及原理介绍</p></li><li><p>Vue-router 原理 hash 和 history 以及 对应微前端 以及monorepo 架构</p></li><li><p>Pinia vuex 设计模式 以及实现原理 为什么刷新数据丢失 以及解决方案</p></li><li><p>AOT 和 JIT 的区别</p></li><li><p>动态扩容 动态缩容 横向扩容 怎么做</p></li><li><p>nginx 四层LB负载均衡 nginx七层LSB 负载均衡怎么做 nginx多机房异地容灾怎么做</p></li><li><p>两地三中心 怎么做？</p></li><li><p>nginx源码中的unix域是怎么做的 做什么的</p></li><li><p>nginx lua插件怎么写</p></li><li><p>网关怎么做 网关熔断怎么做 网关分流怎么做 网关加密怎么做</p></li><li><p>FPS 帧率 requestIdleCallback performance</p></li></ol><h1 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h1><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ol><li>什么是服务熔断？什么是服务降级？</li><li>Eureka和zookeeper都可以提供服务注册与发现的功能，请说说两个的区别？</li><li>SpringBoot和SpringCloud的区别？</li><li>SpringBoot和SpringCloud的区别？</li><li>什么是 feigin ？它的优点是什么？</li><li>Ribbon和Feign的区别？</li></ol><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><ol><li>Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？</li><li>运行Spring Boot有哪几种方式？</li><li>如何理解 Spring Boot 中的 Starters？</li><li>如何在Spring Boot启动的时候运行一些特定的代码？</li><li>Spring Boot 需要独立的容器运行吗？</li><li>Spring Boot中的监视器是什么？</li><li>如何使用Spring Boot实现异常处理？</li><li>你如何理解 Spring Boot 中的 Starters？</li><li>springboot常用的starter有哪些</li><li>SpringBoot 实现热部署有哪几种方式？</li><li>如何理解 Spring Boot 配置加载顺序？</li><li>Spring Boot 的核心配置文件有哪几个？它们的区别是什么？</li><li>如何集成 Spring Boot 和 ActiveMQ？</li></ol><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ol><li>Redis篇</li><li>为什么要用缓存</li><li>说说 Redis 的线程模型</li><li>Redis 持久化方式有哪些？以及有什么区别？</li><li>怎么使用 Redis 实现消息队列？</li><li>说说你对Redis事务的理解</li><li>熟悉哪些 Redis 集群模式？</li><li>Redis 常见性能问题和解决方案有哪些？</li><li>Redis 报内存不足怎么处理？</li><li>说说Redis持久化机制</li><li>缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问</li><li>redis的数据类型，以及每种数据类型的使用场景</li><li>Redis 为什么是单线程的</li><li>Redis 常见性能问题和解决方案？</li><li>了解Redis的事务吗？</li><li>Redis 的数据类型及使用场景</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Front 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2024/09/20/React/"/>
      <url>/2024/09/20/React/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Front React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2024/09/20/Vue/"/>
      <url>/2024/09/20/Vue/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-cli是什么？"><a href="#vue-cli是什么？" class="headerlink" title="vue cli是什么？"></a>vue cli是什么？</h3><h3 id="Vue的解析"><a href="#Vue的解析" class="headerlink" title=".Vue的解析"></a>.Vue的解析</h3><p><code>.vue</code> 文件是 Vue.js 框架使用的单文件组件（Single File Component，SFC）格式，它允许开发者将模板、脚本和样式封装在一个文件中。<code>.vue</code> 文件通常包含 HTML、JavaScript 和 CSS 代码，但它们需要被转换成浏览器可以识别的 JavaScript 和 CSS 代码。</p><p>在 Vue 项目中，<code>.vue</code> 文件的转换工作通常由以下几种工具或插件完成：</p><ol><li><p><strong>Vue CLI</strong>：Vue CLI 是 Vue.js 官方提供的项目脚手架工具，它可以帮助开发者快速搭建 Vue 项目。Vue CLI 内部集成了 webpack，并使用 <code>vue-loader</code> 来处理 <code>.vue</code> 文件的转换。</p></li><li><p><strong>Vite</strong>：Vite 是一种新型的前端构建工具，它在开发环境下利用浏览器的原生 ES 模块能力来提供快速的模块热更新（HMR）。Vite 使用 <code>@vitejs/plugin-vue</code> 插件来处理 <code>.vue</code> 文件。</p></li><li><p><strong>Webpack</strong>：Webpack 是一个模块打包器（module bundler），它可以将项目中的各种资源打包成浏览器可以识别的格式。在使用 Vue.js 时，Webpack 通过 <code>vue-loader</code> 来处理 <code>.vue</code> 文件。</p></li><li><p><strong>Rollup</strong>：Rollup 是一个 ES 模块打包器，它在 Vite 的生产构建中被用来打包代码。虽然 Rollup 本身不直接处理 <code>.vue</code> 文件，但它可以通过插件（如 <code>@rollup/plugin-vue</code>）来支持 Vue.js。</p></li><li><p><strong>Parcel</strong>：Parcel 是另一个零配置的前端构建工具，它也可以处理 <code>.vue</code> 文件，但通常需要配合相应的插件。</p></li></ol><p>在这些工具中，<code>vue-loader</code> 或类似的加载器会解析 <code>.vue</code> 文件，将其中的 HTML 部分转换成 JavaScript 渲染函数，CSS 部分提取出来并转换为相应的样式资源，JavaScript 部分则进行编译和打包。最终，这些资源会被打包成浏览器可以识别和执行的 JavaScript 和 CSS 文件。</p><p>例如，在 Vite 中，<code>.vue</code> 文件的处理流程大致如下：</p><ul><li><strong>解析</strong>：<code>@vitejs/plugin-vue</code> 插件解析 <code>.vue</code> 文件，将模板、脚本和样式分离。</li><li><strong>转换</strong>：模板部分通过 <code>vue/compiler-sfc</code> 转换为 JavaScript 渲染函数；CSS 部分通过 <code>css-loader</code> 或类似工具转换为 CSS 代码。</li><li><strong>打包</strong>：转换后的 JavaScript 和 CSS 代码被 Vite 打包成最终的静态资源。</li></ul><p>这样，当浏览器请求这些资源时，它们已经是可以直接解析和执行的格式了。</p><h3 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h3><p>Vite 是一种新型的前端构建工具，它能够显著提升前端开发体验。Vite 的主要特点包括：</p><ol><li><p><strong>极速的服务启动</strong>：Vite 的开发服务器利用浏览器的原生 ES 模块能力，提供了快速的模块热更新（HMR），使得开发服务器的启动和热更新都非常迅速。</p></li><li><p><strong>丰富的功能</strong>：Vite 对 TypeScript、JSX、CSS 等现代前端技术提供开箱即用的支持，并且具有优化的构建过程。</p></li><li><p><strong>优化的构建</strong>：在生产环境中，Vite 使用 Rollup 进行代码打包，提供预配置的构建指令，以输出高度优化的静态资源。</p></li><li><p><strong>通用的插件接口</strong>：Vite 提供了一个插件系统，允许开发者扩展其功能。</p></li><li><p><strong>完全类型化的 API</strong>：Vite 提供了完整的 TypeScript 支持，使得开发者可以享受到类型安全和 IDE 的良好支持。</p></li></ol><p>Vite 的核心优势在于它在开发环境下的快速响应和生产环境下的高效打包。它通过利用浏览器的原生 ESM 能力，避免了传统打包器在开发环境中的复杂打包过程，从而实现了快速的服务器启动和热更新。此外，Vite 在生产环境中使用 Rollup 进行打包，确保了代码的优化和最小化。</p><p>Vite 的设计理念是提供开箱即用的配置，同时保持高度的可扩展性。它支持多种前端框架，如 Vue、React、Preact、Svelte 等，并且可以通过插件系统进一步扩展其功能。Vite 的出现，为前端开发带来了更快速、更高效的体验。</p><p>Vite 适用于现代前端项目的开发，特别是那些追求开发速度和构建效率的项目。它通过简化构建流程和优化资源加载，帮助开发者提升生产力。如果你正在寻找一个能够提供快速开发体验和高效生产构建的前端工具，Vite 是一个值得考虑的选择。</p><h1 id="Vue3-Hooks实现原理及组件的生命周期"><a href="#Vue3-Hooks实现原理及组件的生命周期" class="headerlink" title="Vue3 Hooks实现原理及组件的生命周期"></a>Vue3 Hooks实现原理及组件的生命周期</h1><h2 id="什么是Hook？"><a href="#什么是Hook？" class="headerlink" title="什么是Hook？"></a>什么是Hook？</h2><p>在JavaScript中，Hook是一种能够拦截和修改函数或方法行为的技术。通过使用Hook，开发者可以在现有的函数执行前、执行后或者替换函数的实现逻辑。这种灵活的能力使得开发者能够定制和扩展现有代码的行为，而无需修改原始代码。</p><p><strong>优点</strong> ：</p><p>1、解耦合和可维护性：使用Hook技术，开发者可以将定制和扩展的逻辑与原始代码解耦合。这种解耦合使得代码更易于维护，因为修改或扩展的逻辑可以在独立的Hook函数中进行管理。<br>2、代码复用：通过将定制和扩展的逻辑封装在Hook函数中，开发者可以在多个地方重复使用相同的Hook函数，从而实现代码复用，减少重复编写相似逻辑的工作量。<br>3、快速原型开发：使用Hook技术，开发者可以迅速修改现有代码的行为，以便进行快速原型开发和实验。这种能力可以帮助开发者更快地迭代和验证想法。</p><p><strong>缺点</strong>：</p><p>1、学习曲线较陡峭，需要熟悉新的编程模式和思维方式。</p><p>2、对于小型项目或简单组件，使用Hooks可能过于复杂。</p><p>3、在Vue生态中，第三方Hooks的质量和兼容性可能存在差异。</p><h2 id="Vue3-Hooks实现原理"><a href="#Vue3-Hooks实现原理" class="headerlink" title="Vue3 Hooks实现原理"></a>Vue3 Hooks实现原理</h2><p>在Vue3中，Hooks是基于Composition API实现的，它允许我们在组件的逻辑代码中更好地组织和复用代码。Hooks本质上是一组可复用的函数，它们可以“钩入”Vue组件的生命周期，让我们能够在组件的不同生命周期阶段执行特定的逻辑。</p><p>Vue3中的Hooks是通过setup函数来使用的，setup函数是Vue3组件中的一个新的生命周期函数，它在组件实例被创建之前调用，并且接收两个参数：props和context。在setup函数中，我们可以定义和返回组件中需要使用的响应式数据、方法、计算属性等，而这些都可以通过Hooks来实现。</p><p><strong>优点</strong>：</p><ul><li>提高了代码的复用性和可维护性。</li><li>使组件的逻辑更加清晰、易于理解。</li><li>更好地管理组件的副作用操作。</li></ul><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//beforeCreate created  setup语法糖模式是没有这个这两个生命周期的 setup去代替了</span><br><span class="line">//调用顺序</span><br><span class="line">console.log(setup)</span><br><span class="line">//创建钩子</span><br><span class="line">onBeforeMount(()=&gt;&#123;</span><br><span class="line">    console.log(&quot;创建之前==========&gt;&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(&quot;创建完成==========&gt;&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">//更新的钩子</span><br><span class="line">onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">   console.log(&quot;组件更新之前==========&gt;&quot;) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">onUpdated(()=&gt;&#123;</span><br><span class="line">   console.log(&quot;组件更新完成==========&gt;&quot;) </span><br><span class="line">&#125;)</span><br><span class="line">//销毁钩子</span><br><span class="line">onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">   console.log(&quot;销毁之前==========&gt;&quot;) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Unmounted(()=&gt;&#123;</span><br><span class="line">console.log(&quot;销毁完成==========&gt;&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="什么是热更新"><a href="#什么是热更新" class="headerlink" title="什么是热更新"></a>什么是热更新</h1><p>所谓的热更新（本文中将其与热加载等同），就是运行时更新代码和资源。</p><p>在主动热更新过程中，客户端向服务器发送请求询问是否有更新，若服务器告知客户端没有更新，就直接进入下一流程。但如果是告知有更新，那就会进入更新流程。按照约定下载指定的文件进行客户端内容的替换和更新。</p><p>热更新也可以做成被动的，直接约定由服务器发送的某条消息触发热更流程。</p><h2 id="为什么要热更"><a href="#为什么要热更" class="headerlink" title="为什么要热更"></a>为什么要热更</h2><p>这里说的热更，包括开发时热更新以及产品发布后的热更新。</p><p>快速版本迭代。<br>减少用户手动更新 app 次数。<br>及时修复 bug。通过热更新及时将应用更新到最新版，快速让补丁生效，不必等到用户手动下载新版。<br>运行时修复 bug。对于服务器来说可以不停机完成 bug 修复和更新，提高用户使用体验。<br>开发时热更新可以减少等待代码生效的时间。对于大型项目来说，修改代码后的编译/启动时间经常会很长，此时使用开发时热更新可以大大提高开发效率。</p><blockquote><p>对于移动App来说，只要产品还在生命周期以内，就不可避免会面临版本升级的问题。产品运营能力的提升，都是靠APP版本更新迭代，早期对于热更新的需求动机主要就是为了解决新版本升级时的升级率和版本收敛速度的问题，随着需求的不断发展，如今热更新被视为整个产品精细化运营的基础，实现版本迭代的灰度发布、AB测试、各种精细化更新。</p></blockquote><p><a href="https://segmentfault.com/a/1190000044831179">前端 - Vite 热更新(HMR)原理了解一下 - 个人文章 - SegmentFault 思否</a></p><h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window">Web API</a></h1><ol><li> Window.localStorage</li></ol><p>只读的<code>localStorage</code> 属性允许你访问一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a> 源（origin）的对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage"><code>Storage</code></a>；存储的数据将保存在浏览器会话中。<code>localStorage</code> 类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage"><code>sessionStorage</code></a>，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 <code>sessionStorage</code> 的数据会被清除。</p><p>应注意，无论数据存储在 <code>localStorage</code> 还是 <code>sessionStorage</code> ，<strong>它们都特定于页面的协议。</strong></p><p>另外，<code>localStorage</code> 中的键值对总是以字符串的形式存储。 (需要注意，和 js 对象相比，键值对总是以字符串的形式存储意味着数值类型会自动转化为字符串类型).</p><p>常用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;myCat&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> cat = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;myCat&quot;</span>);</span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;myCat&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>navbar：创建<i>标签的路由跳转函数toHotgoods</p></li><li><p>hotgoods页面：</p><p>i. header中的search模块: </p><ol><li>返回按钮：编写返回主页面路由函数goHome()</li><li>搜索按钮：路由到ProductList页面（点击搜索框）</li></ol><p>ii. div 热门商品头   导入的css有问题 热门商品div 与 搜索div重叠</p><p>解决：</p><p>margin-top: 50px</p></li><li><p>导入state数据对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem/getItem</span><br><span class="line">closeToast()</span><br></pre></td></tr></table></figure></li><li><p>骨架屏占位：loading值已经被修改还是占位</p><p>没加<code>:</code> 导致数据不能变化</p></li></ol><h1 id="useRoute-和-useRouter-区别"><a href="#useRoute-和-useRouter-区别" class="headerlink" title="useRoute 和 useRouter 区别"></a>useRoute 和 useRouter 区别</h1><ol><li><p>useRoute 主要用于获取当前路由的信息，适用于静态展示当前路由信息的场景。</p></li><li><p>useRouter 主要用于获取路由实例，适用于需要进行动态路由操作的场景，比如跳转到新的路由。<br>在一些场景中，我们可能需要同时使用这两个函数，例如在获取当前路由信息的同时，需要进行一些动态的路由操作。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Front Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加速访问GitHub</title>
      <link href="/2022/02/10/%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AEGitHub/"/>
      <url>/2022/02/10/%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AEGitHub/</url>
      
        <content type="html"><![CDATA[<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a><code>Github</code></h1><blockquote><p>在某些时候国内访问速度慢，往往出现超时现象，是否极大阻碍了在GitHub探索的你，接下来有几种方法解决它吧！</p></blockquote><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><ol><li><p><strong>地理位置</strong>：GitHub 的服务器主要位于美国，如果你在中国或其他远离美国的地方访问 GitHub，由于物理距离较远，数据传输需要更长的时间，这可能导致访问速度慢。</p></li><li><p><strong>网络拥堵</strong>：在网络高峰时段，由于大量用户同时访问互联网，可能会导致网络拥堵，从而影响访问速度。</p></li><li><p><strong>服务器负载</strong>：如果 GitHub 服务器当前负载较高，或者正在进行维护，也可能会影响到访问速度。</p></li><li><p><strong>DNS 解析</strong>：DNS 解析问题也可能导致访问速度慢，特别是如果你的 DNS 服务器响应慢或者解析错误。</p></li><li><p><strong>网络提供商</strong>：不同的网络提供商可能会有不同的国际出口带宽，这也可能影响到访问 GitHub 的速度。</p></li></ol><blockquote><p>大部分是因为DNS解析的问题</p></blockquote><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li><p><strong>使用 CDN</strong>：内容分发网络（CDN）可以缓存静态资源，从而减少加载时间。</p></li><li><p><strong>修改 DNS</strong>：将 DNS 服务器更改为更快的选项，如 Google DNS（8.8.8.8 和 8.8.4.4）或 Cloudflare DNS（1.1.1.1）。</p></li><li><p><strong>使用加速器</strong>：一些服务提供 GitHub 加速功能，通过优化路由或提供代理服务器来加速访问。</p></li><li><p><strong>使用 VPN</strong>：虽然这不是推荐的做法，因为可能会违反 GitHub 的使用条款，但一些用户可能会使用 VPN 来改变他们的地理位置，以获得更快的访问速度。</p></li><li><p><strong>克隆到本地</strong>：如果你经常需要访问某个仓库，可以考虑将其克隆到本地，这样你就可以在本地进行大部分操作，而不必每次都从 GitHub 上下载。</p></li><li><p><strong>使用 Git 服务</strong>：对于私有项目，你可以考虑使用国内的 Git 服务，如 Gitee（码云），它们通常会提供更快的访问速度。</p></li></ol><h1 id="常用解决方法-修改DNS"><a href="#常用解决方法-修改DNS" class="headerlink" title="常用解决方法-修改DNS"></a>常用解决方法-修改DNS</h1><h2 id="修改本地hosts文件（先在hosts文件属性中打开读写权限），在域名查询网站将github的ip加到hosts文件末尾。"><a href="#修改本地hosts文件（先在hosts文件属性中打开读写权限），在域名查询网站将github的ip加到hosts文件末尾。" class="headerlink" title="修改本地hosts文件（先在hosts文件属性中打开读写权限），在域名查询网站将github的ip加到hosts文件末尾。"></a>修改本地hosts文件（先在hosts文件属性中打开读写权限），在域名查询网站将github的ip加到hosts文件末尾。</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxx.xx.xxx.x github.com </span><br><span class="line">//格式</span><br></pre></td></tr></table></figure><ul><li>hosts目录：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure></li></ul><h2 id="Swithhost"><a href="#Swithhost" class="headerlink" title="Swithhost"></a><a href="https://github.com/oldj/SwitchHosts/releases">Swithhost</a></h2><p>导入远程hosts自动更新url：<a href="https://raw.hellogithub.com/hosts">https://raw.hellogithub.com/hosts</a><br>导入成功hosts：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># GitHub520 Host Start</span><br><span class="line"><span class="number">140.82</span><span class="number">.113</span><span class="number">.25</span>                 alive.github.com</span><br><span class="line"><span class="number">140.82</span><span class="number">.112</span><span class="number">.5</span>                  api.github.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.110</span><span class="number">.153</span>               assets-cdn.github.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span>               avatars.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.111</span><span class="number">.133</span>               avatars0.githubusercontent.com</span><br><span class="line"><span class="number">185.199</span><span class="number">.108</span><span class="number">.133</span>               avatars1.githubusercontent.com</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA激活教程</title>
      <link href="/2021/09/26/IDEA%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/"/>
      <url>/2021/09/26/IDEA%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA永久重置30天试用"><a href="#IDEA永久重置30天试用" class="headerlink" title="IDEA永久重置30天试用"></a>IDEA永久重置30天试用</h1><blockquote><p>若条件允许，倡导使用正版</p><p>更新时间：2021年10月1日</p></blockquote><h2 id="官网下载你所需IDEA专业版"><a href="#官网下载你所需IDEA专业版" class="headerlink" title="官网下载你所需IDEA专业版"></a>官网下载你所需IDEA专业版</h2><blockquote><p>IDEA官网：<a href="https://www.jetbrains.com/idea/">https://www.jetbrains.com/idea/</a></p><p>这里默认使用intellij</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="若安装了老版本，卸载（卸载时勾选Delete-local-history）重下官网新版本"><a href="#若安装了老版本，卸载（卸载时勾选Delete-local-history）重下官网新版本" class="headerlink" title="若安装了老版本，卸载（卸载时勾选Delete local history）重下官网新版本"></a>若安装了老版本，卸载（卸载时勾选Delete local history）重下官网新版本</h3><h3 id="安装根据自己所需设置（若没有特殊要求可以一直下一步）"><a href="#安装根据自己所需设置（若没有特殊要求可以一直下一步）" class="headerlink" title="安装根据自己所需设置（若没有特殊要求可以一直下一步）"></a>安装根据自己所需设置（若没有特殊要求可以一直下一步）</h3><blockquote><p><img src="https://i.loli.net/2021/10/02/5ArI96YvlGZckm1.jpg" alt="1616141581896.jpg"></p></blockquote><h3 id="汉化包下载-如下窗口搜索Chinese-Language"><a href="#汉化包下载-如下窗口搜索Chinese-Language" class="headerlink" title="汉化包下载 如下窗口搜索Chinese Language"></a>汉化包下载 如下窗口搜索Chinese Language</h3><blockquote><p>   <img src="https://i.loli.net/2021/10/01/F5ecZRk8LmXviwG.png" alt="NVIDIA_Share_kTCZP6m8GG.png"></p></blockquote><blockquote><p><img src="https://i.loli.net/2021/10/01/Xt2HwsaDI97uk1o.png" alt="idea64_lamqLEyUhF.png"></p></blockquote><h3 id="永久重置30天脚本"><a href="#永久重置30天脚本" class="headerlink" title="永久重置30天脚本"></a>永久重置30天脚本</h3><blockquote><p> <a href="https://fuhaoyu.lanzoui.com/b026jfrxi">https://fuhaoyu.lanzoui.com/b026jfrxi</a> 密码:fkai</p><p> 千万不要解压 千万不要解压 千万不要解压 千万不要解压！！！！</p></blockquote><h3 id="进入IDEA-随便建一个java工程"><a href="#进入IDEA-随便建一个java工程" class="headerlink" title="进入IDEA 随便建一个java工程"></a>进入IDEA 随便建一个java工程</h3><p><img src="https://i.loli.net/2021/09/28/I4VduG8ijyXKRnM.png" alt="idea64_EYk2OiOuAZ.png"></p><h3 id="将下载的压缩包拉入java工程"><a href="#将下载的压缩包拉入java工程" class="headerlink" title="将下载的压缩包拉入java工程"></a>将下载的压缩包拉入java工程</h3><p>  <img src="https://i.loli.net/2021/10/01/BQntVIicxk2DEYl.png" alt="idea64_3EuiMa4BPf.png"></p><blockquote><p>另一种安装zip文件方式</p><p><img src="https://www.cxybug.com/chezai-music/161881715122776" alt="IDEA 2021.2.2通过磁盘安装插件"></p></blockquote><h3 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h3><p><img src="https://www.cxybug.com/exception/160922431249643.jpg" alt="IDEA破解补丁提示安装成功"></p><h3 id="重启IDEA-一定要重启IDEA"><a href="#重启IDEA-一定要重启IDEA" class="headerlink" title="重启IDEA 一定要重启IDEA"></a>重启IDEA 一定要重启IDEA</h3><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><blockquote><p><img src="https://i.loli.net/2021/10/01/dBlzPxAtSOw7Fqg.png" alt="idea64_D20mXjo8bt.png"></p><p><img src="https://i.loli.net/2021/10/01/zNp3dWH76tGDPKa.png" alt="idea64_Rd3pwnrNWd.png"></p><p><img src="https://i.loli.net/2021/10/01/OEzJTvD1WCpk6My.png" alt="idea64_l5b7NktMij.png"></p></blockquote><p>鉴于博客：<a href="https://www.exception.site/article/29">https://www.exception.site/article/29</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2021/09/24/Python/"/>
      <url>/2021/09/24/Python/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h1><blockquote><p>C、C++、JAVA中的<code>&#123; &#125;</code>换为了<code>：</code></p></blockquote><h2 id="python注释"><a href="#python注释" class="headerlink" title="python注释"></a>python注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a comment 单行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;XXX&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="python变量"><a href="#python变量" class="headerlink" title="python变量"></a>python变量</h2><h3 id="赋值即为创建变量"><a href="#赋值即为创建变量" class="headerlink" title="赋值即为创建变量"></a>赋值即为创建变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;Bill&quot;</span></span><br><span class="line"><span class="comment"># is the same as 字符串的两种命名方式</span></span><br><span class="line">x = <span class="string">&#x27;Bill&#x27;</span></span><br><span class="line">x = <span class="number">5</span> <span class="comment"># x is of type int</span></span><br><span class="line">x = <span class="string">&quot;Steve&quot;</span> <span class="comment"># x is now of type str</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h3><blockquote><ul><li><p>变量名必须以字母或下划线字符开头</p></li><li><p>变量名称不能以数字开头</p></li><li><p>变量名只能包含字母数字字符和下划线（A-z、0-9 和 _）</p></li><li><p>变量名称区分大小写（age、Age 和 AGE 是三个不同的变量）</p></li></ul><p>变量名区分大小写</p></blockquote><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><blockquote><p>可多次赋值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Cherry&quot;</span></span><br><span class="line">x = y = z = <span class="string">&quot;Orange&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br></pre></td></tr></table></figure><h3 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h3><blockquote><p>int+int  char/string+char/string </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="string">&quot;Bill&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p><code>type()</code>函数输出任何对象的数据类型</p></blockquote><table><thead><tr><th>文本类型</th><th>str</th></tr></thead><tbody><tr><td>数值类型</td><td>int、float、complex[复数2j]</td></tr><tr><td>序列类型</td><td>list 、tuple 、range</td></tr><tr><td>映射类型</td><td>dict</td></tr><tr><td>集合类型</td><td>set 、 frozenset</td></tr><tr><td>布尔类型</td><td>bool</td></tr><tr><td>二进制类型</td><td>bytes、bytearray 、 memoryview[查看数组的内存位置]</td></tr></tbody></table><blockquote><p>强制类型转换: </p><ul><li><code>int ()</code> 对数进行下舍入</li><li><code>float()</code></li><li><code>str()</code>构造字符串</li></ul></blockquote><blockquote><p>随机数【py种存在一个<code>randow</code>模块】</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">2</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure></blockquote></blockquote><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><blockquote><p>‘English’==”English”</p></blockquote><h4 id="多行字符串赋值"><a href="#多行字符串赋值" class="headerlink" title="多行字符串赋值"></a>多行字符串赋值</h4><p><code>a=&#39;&#39;&#39;XXXXXXXXXXXXX&#39;&#39;&#39;</code> or <code>a=&quot;&quot;&quot;XXXXXXXXXXX&quot;&quot;&quot;</code> 结果表现中，换行符插入位置与代码中位置相同</p><h4 id="字符串是数组"><a href="#字符串是数组" class="headerlink" title="字符串是数组"></a>字符串是数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正索引</span></span><br><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#输出结果e</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 负索引 从字符串末尾开始计数</span></span><br><span class="line">b = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(b[-<span class="number">5</span>:-<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 输出结果orl</span></span><br></pre></td></tr></table></figure><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h4><blockquote><p>函数<code>len()</code></p></blockquote><h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><ul><li><p><code>strip()</code> —-   删除开头和结尾的空白字符</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot; Hello, World! &quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.strip()) <span class="comment"># returns &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>lower()</code> 返回小写字符串    <code>upper()</code>返回大写字符串</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.lower())</span><br><span class="line"><span class="built_in">print</span>(a.upper())</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>replace()</code>用另一段字符串替换字符串</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.replace(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;Kitty&quot;</span>))</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>split()</code>在分隔符处拆分为子字符串</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.split(<span class="string">&quot;,&quot;</span>)) <span class="comment"># returns [&#x27;Hello&#x27;, &#x27; World!&#x27;]</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h4 id="检查字符串-in-not-in-关键字"><a href="#检查字符串-in-not-in-关键字" class="headerlink" title="检查字符串(in/ not in 关键字)"></a>检查字符串(in/ not in 关键字)</h4><blockquote><p>返回<code>true</code> or <code> false</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">&quot;China is a great country&quot;</span></span><br><span class="line">x = <span class="string">&quot;ina&quot;</span> <span class="keyword">in</span> txt <span class="comment">#检查是否有短语&#x27;ina&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment">#return True</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="Python文件读取"><a href="#Python文件读取" class="headerlink" title="Python文件读取"></a>Python文件读取</h1><h1 id="Python-NumPy"><a href="#Python-NumPy" class="headerlink" title="Python NumPy"></a>Python NumPy</h1>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2021/08/24/Git/"/>
      <url>/2021/08/24/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="常见版本控制工具"><a href="#常见版本控制工具" class="headerlink" title="常见版本控制工具"></a>常见版本控制工具</h3><ul><li><p>Git</p></li><li><p>SVN</p></li><li><p>CVS</p></li><li><p>VSS</p></li><li><p>TFS</p></li><li><p>VS Online </p><h3 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h3></li></ul><ol><li><p>本地版本控制</p></li><li><p>集中版本控制    <code>所有版本放在服务器上 需联网才能版本统一</code></p></li><li><p>分布式版本控制 <code>各个应用端代码与服务器相同</code></p></li></ol><h2 id="常见Linux命令"><a href="#常见Linux命令" class="headerlink" title="常见Linux命令"></a>常见Linux命令</h2><ol><li><code>cd</code>  切换目录 </li><li><code>cd..</code> 返回上一级目录 </li><li><code>pwd</code> 显示当前目录</li><li><code>ls</code> 列出当前目录的所有文件</li><li><code>touch</code> 当前目录下新建一个文件</li><li><code>rm</code> 删除文件</li><li><code>mkdir</code> 新建一个文件夹</li><li><code>rm -r</code> 删除一个文件夹 <code>rm -rf /</code>     切勿在Linux下尝试！</li><li><code>mv</code> 移动文件夹  <code>mv 文件 文件夹</code></li><li><code>clear</code> 清屏</li><li><code>exit</code> 退出Git</li><li><code>history</code> 历史命令</li><li><code>help</code> 帮助</li><li><code>#</code> </li><li><code>reset</code>  初始化终端</li></ol><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><p>查看配置<code>git config -l</code></p><ul><li><p>查看系统配置           <code>git config --system --list</code> </p></li><li><p>查看用户配置          <code>git config -- global --list</code> </p><blockquote><p>在用户种找到<code>.gitconfig</code>文件删除全部内容</p><p>在进行重新配置</p><p><code>git config --global user.name &quot;XXXX&quot;</code></p><p><code>git config --global user.email XXX@qq.com</code> </p></blockquote></li></ul><h2 id="Git基本配置"><a href="#Git基本配置" class="headerlink" title="Git基本配置"></a>Git基本配置</h2><p><img src="https://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg" alt="img"></p><h2 id="Git常见操作"><a href="#Git常见操作" class="headerlink" title="Git常见操作"></a>Git常见操作</h2><ol><li><code>git commit </code>提交代码</li><li><code>git branch XXX </code>创建分支</li><li><code>git checkout XXX</code> </li><li></li></ol><p>Git在线学习：<a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Front Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML/CSS/JavaScript</title>
      <link href="/2020/12/23/HTML/"/>
      <url>/2020/12/23/HTML/</url>
      
        <content type="html"><![CDATA[<h2 id="web-标准"><a href="#web-标准" class="headerlink" title="web 标准"></a>web 标准</h2><span id="more"></span><blockquote><p>在不同网页中有相同展示，利与维护，减少流量消耗…</p></blockquote><ul><li><p>Structure   对网页进行整理和分类 HTML</p></li><li><p>Presenta   IU外观设计  CSS</p></li><li><p>Behavior   网页交互  Javascript</p><blockquote><p>结构写到HTML ，表现写在CSS，行为写在Javascript </p></blockquote></li></ul><h2 id="HTML-语法规范"><a href="#HTML-语法规范" class="headerlink" title="HTML 语法规范"></a>HTML 语法规范</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><code>&lt;html&gt;</code> （开始）<code>&lt;/html&gt;</code>（结束） –&gt;双标签   </li><li><code> &lt;br /&gt;</code> –&gt;单标签 </li></ul><h4 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h4><ul><li><p>包含关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="HTML-basic-tags"><a href="#HTML-basic-tags" class="headerlink" title="HTML basic tags"></a>HTML basic tags</h4><ul><li><p><code>&lt;html&gt;&lt;/html&gt;</code>   HTML标签 </p></li><li><p><code>&lt;head&gt;&lt;/head&gt;</code>   文档头部 </p></li><li><p><code>&lt;title&gt;&lt;/title&gt;</code> 文档的标题  可跟改的网页标题</p></li><li><p><code>&lt;body&gt;&lt;/body&gt;</code>    文档主体   页面内容放在body之中</p></li><li><p>Example：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span> 第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        乾坤未定,你我皆是黑马！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Effective-Tools"><a href="#Effective-Tools" class="headerlink" title="Effective Tools"></a>Effective Tools</h4>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-Dw </span><br><span class="line">-Webstorm</span><br><span class="line">-Vscode</span><br><span class="line">-Hbuilder</span><br></pre></td></tr></table></figure><blockquote><p>Vscode  的使用</p><ul><li>Search <code>Chinese</code>  to download the Chinese version</li><li>Search <code>OPen in Browser</code>  Right-click and select the browser to open the HTML file</li><li>Search <code>Auto Rename Tag</code>   Automatically rename matching HTML/XML tags </li></ul></blockquote><h4 id="文档类型声明标签"><a href="#文档类型声明标签" class="headerlink" title="文档类型声明标签"></a>文档类型声明标签</h4><p>   <code>&lt;!DOCTYPE html&gt;</code>: 采取HTML5版本显示网页(必须写在<code>&lt;html&gt;</code>之前）   </p><h4 id="lang语言种类-这种属性针对于浏览器的翻译"><a href="#lang语言种类-这种属性针对于浏览器的翻译" class="headerlink" title="lang语言种类(这种属性针对于浏览器的翻译)"></a>lang语言种类(这种属性针对于浏览器的翻译)</h4><ul><li><code>en</code>  defined English</li><li><code>zh-CN</code> defined Chinese</li><li><code>fr</code> defined French</li></ul><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><blockquote><ul><li><p>多个字符的集合，以便计算机识别和储存各种文字</p></li><li><p>用在<code>&lt;head&gt;</code> 标签内，通过<code>&lt;meta&gt;</code> 标签的<code>charset</code> 属性规定HTML文档使用哪种字符</p></li><li><p>Example :  <code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code></p></li><li><p>charset 常用的值有: GB2312、BIG5、GBK 、UTF-8(万国码)</p><blockquote><p>该语法必须要写否则会出现乱码的情况，一般使用UTF-8编码</p></blockquote></li></ul></blockquote><h4 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h4><ul><li><p>标签语义（使页面结构更清晰）</p></li><li><p> 标题标签：<code>&lt;h1&gt; </code>-<code>&lt;h6&gt;</code> 大小逐步递减        Example：<code>&lt;h1&gt; 一级标题 &lt; /h1&gt; </code> (写在<code>&lt;body&gt;</code> 内部)</p></li><li><p>段落和换行标签: <code>&lt;p&gt; Content &lt;/p&gt;</code> and <code>&lt;br /&gt;</code></p></li><li><p>文本格式化标签:</p><ul><li> 加粗 <code>&lt;strong&gt; &lt;/strong&gt;</code>  or  <code>&lt;b&gt; &lt;/b&gt;</code>     </li><li>倾斜<code>&lt;em&gt; &lt;/em&gt;</code>  or  <code>&lt;i&gt; &lt;/i&gt;</code></li><li>删除线<code>&lt;del&gt; &lt;/del&gt;</code>or   <code>&lt;s&gt; &lt;/s&gt;</code></li><li>下划线 <code>&lt;ins&gt; &lt;/ins&gt;</code> or <code>&lt;u&gt; &lt;/u&gt;</code></li></ul></li><li><p><code>&lt;div&gt; 和&lt;span&gt;</code> : 是一个盒子用来装内容</p><ul><li><code>&lt;div&gt;  &lt;/div&gt;</code>     独占一行</li><li><code>&lt;span&gt; &lt;/span&gt;</code>    一行可放多个盒子</li></ul></li><li><p>图像标签和路径</p><ul><li><p>图像标签：<code>&lt;img src=&quot;图像URL&quot; /&gt;</code>   (指定图像文件的路径和文件名)   </p><blockquote><p><code>alt</code> 替换文本，图像显现不出来的时候用文字替换</p></blockquote><p>```Example: <code>&lt;img src = &quot;XXX.jpg&quot;   alt =&quot;图片注释&quot; /&gt;</code></p><p><code>title</code>  提示文本，鼠标放在图片上提示文字<br> Example: <code>&lt;img src = &quot;XXX.jpg&quot;   alt =&quot;图片注释&quot; title =&quot;爱心湖&quot; /&gt;</code></p><p> <code>width</code>  setting the photo’s width  <code>height</code> setting the photo’s height </p><p> Example : <code>&lt;img src = &quot;XXX.jpg&quot;   alt =&quot;图片注释&quot; title =&quot;爱心湖&quot;  width=&quot;500&quot; height=&quot;400&quot;/&gt;</code></p><p> <code>border</code>  设置图像的边框粗细</p><p> Example : <code>&lt;img src = &quot;XXX.jpg&quot;   alt =&quot;图片注释&quot; title =&quot;爱心湖&quot;  width=&quot;500&quot; height=&quot;400&quot; border=&quot;15&quot;/&gt;</code></p></li><li><p>路径</p><blockquote><p>相对路径</p><p><code>..</code>     上一级目录</p><p><code>../</code>   下一级目录 </p><p>Example :  <code>&lt;img src =&quot;照片/爱心湖.jpg&quot; /&gt;</code> </p></blockquote><blockquote><p>绝对路径: </p><p>路径的全部名称</p><p>Example :  <code>&lt;img src =&quot;照片/爱心湖.jpg&quot; /&gt;</code></p></blockquote></li></ul></li><li><p>超链接标签</p><ul><li>语法格式 : </li></ul><p><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标弹出方式&quot;&gt; 文本或图像&lt;/a&gt;</code></p><blockquote><p>herf 用于指定连接目标的url地址 （必须写出） 使其具有超链接的功能</p><p>target 指定链接页面打开方式   :  <code>_self </code>为默认值  <code>_blank</code> 新窗口打开  </p></blockquote><ul><li>链接方式</li></ul><blockquote><p>外部链接：<code>https://chucklery.github.io</code> </p><p>内部链接：Example: <code>&lt;a href =&quot;XXX.html&quot;&gt;XXX&lt;/a&gt;</code> （本地的HTML文件）<br>空链接：<code>&lt;a href=&quot;#&quot;&gt;XXX&lt;/a&gt;</code><br>下载链接：<code>&lt;a href=&quot;XXX.zip&quot;&gt;下载链接&lt;/a&gt; </code><br>锚点链接：（点击链接，快速定位页面中的某个位置）</p><p>Example: <code>&lt;a href =&quot;#名字&quot;&gt; 文本 图像&lt;/a&gt; </code> <code> &lt;h3 id =名字&gt;本文 图像&lt;/h3&gt;</code> </p></blockquote></li></ul><h4 id="HTML-中的注释和特殊字符"><a href="#HTML-中的注释和特殊字符" class="headerlink" title="HTML 中的注释和特殊字符"></a>HTML 中的注释和特殊字符</h4><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-Contrast-Normalize-and-Reset"><a href="#1-Contrast-Normalize-and-Reset" class="headerlink" title="1. Contrast Normalize and Reset"></a>1. Contrast Normalize and Reset</h2><ol><li><p><strong><code>reset.css</code></strong></p><p>重置样式表的目标是减少浏览器在默认行高、边距和标题的字体大小等方面的不一致。</p><p>在写页面时，由于HTML标签自带一些CSS属性，导致在调试样式的时候会出现各种奇怪的问题，为了大概率避免这些问题，在写CSS之前可以引用一下代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* http://meyerweb.com/eric/tools/css/reset/ </span></span><br><span class="line"><span class="comment">   v2.0 | 20110126</span></span><br><span class="line"><span class="comment">   License: none (public domain)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, applet, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, pre,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, acronym, <span class="selector-tag">address</span>, big, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, s, <span class="selector-tag">samp</span>,</span><br><span class="line">small, strike, <span class="selector-tag">strong</span>, sub, <span class="selector-tag">sup</span>, tt, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>, u, <span class="selector-tag">i</span>, center,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, embed, </span><br><span class="line"><span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, </span><br><span class="line"><span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, output, ruby, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">font</span>: inherit;</span><br><span class="line"><span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, </span><br><span class="line"><span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line"><span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br><span class="line"><span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>Normalize.css</code></strong></p></li></ol><p>​    <a href="http://necolas.github.io/normalize.css/">Normalize.css</a> 只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的<code>CSS reset</code>，<code>Normalize.css</code>是一种现代的、为HTML5准备的优质替代方案。<code>Normalize.css</code>现在已经被用于<a href="http://getbootstrap.com/">Twitter Bootstrap</a>、<a href="http://html5boilerplate.com/">HTML5 Boilerplate</a>、<a href="http://www.gov.uk/">GOV.UK</a>、<a href="http://www.rdio.com/">Rdio</a>、<a href="http://css-tricks.com/">CSS Tricks</a> 以及许许多多其他框架、工具和网站上。</p><ul><li><p>[Normalize.css项目地址](<a href="https://necolas.github.io/normalize.css/">Normalize.css: Make browsers render all elements more consistently. (necolas.github.io)</a>)</p></li><li><p><a href="https://github.com/necolas/normalize.css">Normalize.css 在GitHub上的源码</a></p><p><strong>综述</strong></p><hr><p><code>Normalize.css</code>是一种<code>CSS reset</code>的替代方案。</p><p>创造<code>normalize.css</code>有下面这几个目的：</p><ul><li><strong>保护有用的浏览器默认样式</strong>而不是完全去掉它们</li><li><strong>一般化的样式</strong>：为大部分HTML元素提供</li><li><strong>修复浏览器自身的bug</strong>并保证各浏览器的一致性</li><li><strong>优化CSS可用性</strong>：用一些小技巧</li><li><strong>解释代码</strong>：用注释和详细的文档来</li></ul><p><code>Normalize.css</code>支持包括手机浏览器在内的超多浏览器，同时对HTML5元素、排版、列表、嵌入的内容、表单和表格都进行了一般化。尽管这个项目基于一般化的原则，但我们还是在合适的地方使用了更实用的默认值。</p><p><strong>Normalize vs Reset</strong></p><hr><p>知道<code>Normalize.css</code>和传统<code>Reset</code>的区别是非常有价值的。</p><h5 id="1-Normalize-css-保护了有价值的默认值"><a href="#1-Normalize-css-保护了有价值的默认值" class="headerlink" title="1. Normalize.css 保护了有价值的默认值"></a>1. Normalize.css 保护了有价值的默认值</h5><p><code>Reset</code>通过为几乎所有的元素施加默认样式，强行使得元素有相同的视觉效果。相比之下，<code>Normalize.css</code>保持了许多默认的浏览器样式。这就意味着你不用再为所有公共的排版元素重新设置样式。当一个元素在不同的浏览器中有不同的默认值时，<code>Normalize.css</code>会力求让这些样式保持一致并尽可能与现代标准相符合。</p><h5 id="2-Normalize-css-修复了浏览器的bug"><a href="#2-Normalize-css-修复了浏览器的bug" class="headerlink" title="2. Normalize.css 修复了浏览器的bug"></a>2. Normalize.css 修复了浏览器的bug</h5><p>它修复了常见的桌面端和移动端浏览器的bug。这往往超出了<code>Reset</code>所能做到的范畴。关于这一点，<code>Normalize.css</code>修复的问题包含了HTML5元素的显示设置、预格式化文字的<code>font-size</code>问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。</p><p>可以看以下这个例子，看看对于HTML5中新出现的<code>input</code>类型<code>search</code>，<code>Normalize.css</code>是如何保证跨浏览器的一致性的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Addresses appearance set to searchfield in S5, Chrome</span></span><br><span class="line"><span class="comment"> * 2. Addresses box-sizing set to border-box in S5, Chrome (include -moz to future-proof)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span> &#123;</span><br><span class="line">  -webkit-appearance: textfield; <span class="comment">/* 1 */</span></span><br><span class="line">  -moz-<span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: content-box; <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes inner padding and search cancel button in S5, Chrome on OS X</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span>::-webkit-search-decoration,</span><br><span class="line">input[type=<span class="string">&quot;search&quot;</span>]::-webkit-search-cancel-button &#123;</span><br><span class="line">  -webkit-appearance: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-Normalize-css-不会让你的调试工具变的杂乱"><a href="#3-Normalize-css-不会让你的调试工具变的杂乱" class="headerlink" title="3. Normalize.css 不会让你的调试工具变的杂乱"></a>3. Normalize.css 不会让你的调试工具变的杂乱</h5><p>使用Reset最让人困扰的地方莫过于在浏览器调试工具中大段大段的继承链，如下图所示。在<code>Normalize.css</code>中就不会有这样的问题，因为在我们的准则中对多选择器的使用时非常谨慎的，我们仅会有目的地对目标元素设置样式。</p><p><img src="https://s2.loli.net/2024/09/20/MgnAw6BvL2bOxl8.png"></p><h5 id="4-Normalize-css-是模块化的"><a href="#4-Normalize-css-是模块化的" class="headerlink" title="4. Normalize.css 是模块化的"></a>4. Normalize.css 是模块化的</h5><p>这个项目已经被拆分为多个相关却又独立的部分，这使得你能够很容易也很清楚地知道哪些元素被设置了特定的值。因此这能让你自己选择性地移除掉某些永远不会用到部分（比如表单的一般化）。</p><h5 id="5-Normalize-css-拥有详细的文档"><a href="#5-Normalize-css-拥有详细的文档" class="headerlink" title="5. Normalize.css 拥有详细的文档"></a>5. Normalize.css 拥有详细的文档</h5><p>Normalize.css的代码基于详细而全面的跨浏览器研究与测试。这个文件中拥有详细的代码说明并在<a href="https://github.com/necolas/normalize.css/wiki">Github Wiki</a>中有进一步的说明。这意味着你可以找到每一行代码具体完成了什么工作、为什么要写这句代码、浏览器之间的差异，并且你可以更容易地进行自己的测试。</p><p>这个项目的目标是帮助人们了解浏览器默认是如何渲染元素的，同时也让人们很容易地明白如何改进浏览器渲染。</p><h3 id="如何使用-normalize-css"><a href="#如何使用-normalize-css" class="headerlink" title="如何使用 normalize.css"></a>如何使用 normalize.css</h3><p>首先，安装或从Github<a href="http://necolas.github.com/normalize.css/">下载Normalize.css</a>，接下来有两种主要途径去使用它。</p><ul><li>策略一：将<code>normalize.css</code>作为你自己项目的基础CSS，自定义样式值以满足设计师的需求。</li><li>策略二：引入<code>normalize.css</code>源码并在此基础上构建，在必要的时候用你自己写的CSS覆盖默认值。</li></ul></li></ul><h1 id="JavaScript：语言及实现"><a href="#JavaScript：语言及实现" class="headerlink" title="JavaScript：语言及实现"></a>JavaScript：语言及实现</h1><p>包含ECMAScirpt、DOM、BOM。</p><h2 id="1-ECMAScript：语言标准和语言版本"><a href="#1-ECMAScript：语言标准和语言版本" class="headerlink" title="1. ECMAScript：语言标准和语言版本"></a>1. ECMAScript：语言标准和语言版本</h2><p> <code>ECMA</code> 是 “ <code>ECMAScript</code> ” 规范下的 <code>JavaScript</code> 语言标准化的机构。ECMAScript 和 JavaScript ，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript），可互换。</p><p><code>ES6</code> 表示语言（标准）的第 6 版</p><h2 id="2-DOM"><a href="#2-DOM" class="headerlink" title="2.DOM"></a>2.DOM</h2><ul><li><a href="https://www.w3school.com.cn/jsref/dom_obj_document.asp">Document</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_anchor.asp">Anchor</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_area.asp">Area</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_base.asp">Base</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_body.asp">Body</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_pushbutton.asp">Button</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_canvas.asp">Canvas</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp">Event</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_form.asp">Form</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_frame.asp">Frame</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_frameset.asp">Frameset</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_iframe.asp">IFrame</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_image.asp">Image</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_button.asp">Input Button</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_checkbox.asp">Input Checkbox</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_fileupload.asp">Input File</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_hidden.asp">Input Hidden</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_password.asp">Input Password</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_radio.asp">Input Radio</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_reset.asp">Input Reset</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_submit.asp">Input Submit</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_text.asp">Input Text</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_link.asp">Link</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_meta.asp">Meta</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_object.asp">Object</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_option.asp">Option</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_select.asp">Select</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_style.asp">Style</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_table.asp">Table</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_tabledata.asp">TableCell</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_tablerow.asp">TableRow</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_textarea.asp">Textarea</a></li></ul><h2 id="3-BOM"><a href="#3-BOM" class="headerlink" title="3. BOM"></a>3. BOM</h2><ul><li><a href="https://www.w3school.com.cn/jsref/dom_obj_window.asp">Window</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_navigator.asp">Navigator</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_screen.asp">Screen</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_history.asp">History</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_location.asp">Location</a></li></ul><p>setTimeout</p><p>闭包</p><h2 id="4-异步编程"><a href="#4-异步编程" class="headerlink" title="4. 异步编程"></a>4. 异步编程</h2><p>在 JavaScript 中，<code>Promise</code> 和 <code>async/await</code> 是处理异步编程的两种重要机制。它们帮助开发者编写更清晰、更易于理解的代码，尤其是在处理需要等待完成的任务（如网络请求、文件读写等）时。下面我将分别解释这两个概念：</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ol><li><p><strong>定义</strong>：<code>Promise</code> 是一种用于异步计算的对象。它代表了一个可能还不可用的值，或者一个在未来某个时间点才可用的最终结果。</p></li><li><p><strong>状态</strong>：一个 <code>Promise</code> 对象有三种状态：</p><ul><li><strong>Pending（进行中）</strong>：初始状态，既不是成功，也不是失败状态。</li><li><strong>Fulfilled（已成功）</strong>：意味着操作成功完成。</li><li><strong>Rejected（已失败）</strong>：意味着操作失败。</li></ul></li><li><p><strong>方法</strong>：</p><ul><li><code>.then()</code>：当 <code>Promise</code> 成功解决时调用。</li><li><code>.catch()</code>：当 <code>Promise</code> 失败时调用。</li><li><code>.finally()</code>：无论 <code>Promise</code> 成功还是失败，都会调用。</li></ul></li><li><p><strong>使用场景</strong>：当你需要执行一个异步操作，但又不想使用回调函数（这会导致所谓的“回调地狱”）时，可以使用 <code>Promise</code>。</p></li></ol><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><ol><li><p><strong>定义</strong>：<code>async/await</code> 是基于 <code>Promise</code> 的语法糖，它使得异步代码的编写和同步代码一样直观和易于理解。</p></li><li><p><strong>async</strong>：<code>async</code> 关键字用于声明一个函数是异步的。这意味着该函数会返回一个 <code>Promise</code> 对象。</p></li><li><p><strong>await</strong>：<code>await</code> 关键字用于等待一个 <code>Promise</code> 解决。它会暂停 <code>async</code> 函数的执行，直到 <code>Promise</code> 解决（无论是成功还是失败），然后继续执行函数的剩余部分。</p></li><li><p><strong>使用场景</strong>：当你需要编写复杂的异步逻辑，但又希望代码看起来像是同步执行的，可以使用 <code>async/await</code>。</p></li></ol><h3 id="理解示例"><a href="#理解示例" class="headerlink" title="理解示例"></a>理解示例</h3><p>假设我们有一个异步函数，它模拟了一个网络请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&quot;Data received&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-Promise"><a href="#使用-Promise" class="headerlink" title="使用 Promise"></a>使用 Promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetchData()</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// &quot;Data received&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="使用-async-await"><a href="#使用-async-await" class="headerlink" title="使用 async/await"></a>使用 async/await</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchDataAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> fetchData();</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// &quot;Data received&quot;</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchDataAsync();</span><br></pre></td></tr></table></figure><p>在 <code>async/await</code> 示例中，<code>await</code> 关键字使得我们可以暂停 <code>fetchDataAsync</code> 函数的执行，直到 <code>fetchData</code> 函数中的 <code>Promise</code> 解决。这样，代码的逻辑更加清晰，易于理解。</p><p>总结来说，<code>Promise</code> 提供了一种处理异步操作的机制，而 <code>async/await</code> 则在此基础上提供了一种更简洁、更直观的写法。两者都是现代 JavaScript 开发中不可或缺的工具。</p><h3 id="setTimeout函数"><a href="#setTimeout函数" class="headerlink" title="setTimeout函数"></a>setTimeout函数</h3><p>setTimeout函数 0 秒延时并不代表立即执行！<br>属于 宏任务的 setTimeout 需等待同步任务、微任务、DOM渲染完成后，通过事件轮询触发执行<br>所有 setTimeout 的开始计时时间几乎相同<br>延时相同的 setTimeout ，会按 setTimeout 的出现的先后顺序执行<br>延时不同的 setTimeout ，延时越久的 setTimeout 越晚执行</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">resolve(<span class="string">&quot;nihao&quot;</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//setTimeout(console.log, 0, promise)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line"><span class="comment">//setTimeout(console.log, 1000, promise)</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> promise</span><br><span class="line"><span class="comment">//setTimeout(console.log, 1500, promise)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">333</span>)</span><br><span class="line"><span class="keyword">return</span> res   <span class="comment">//返回期约对象  =Promise.resolve(res)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testAsync().then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res));  <span class="comment">//给返回的期约加解决程序</span></span><br></pre></td></tr></table></figure><p>这段代码是一个使用 JavaScript 编写的异步函数示例，它展示了 <code>Promise</code> 和 <code>async/await</code> 的使用。下面是对每行代码的解释以及整个函数的执行顺序：</p><ol><li><p><code>async function testAsync()&#123;</code> - 定义了一个名为 <code>testAsync</code> 的异步函数。在异步函数内部，可以使用 <code>await</code> 关键字来等待一个 <code>Promise</code> 的解决（resolve）。</p></li><li><p><code>console.log(111)</code> 立即执行，打印数字 111 到控制台。</p></li><li><p><code>const promise = new Promise((resolve, reject)=&gt;&#123;</code> 创建了一个新的 <code>Promise</code> 对象，它接受一个执行器函数作为参数，该函数有两个参数：<code>resolve</code> 和 <code>reject</code>。<code>resolve</code> 用于在异步操作成功时调用，<code>reject</code> 用于在异步操作失败时调用。</p></li><li><p><code>setTimeout(()=&gt;&#123;</code> 设置了一个定时器，将在大约 2 秒后执行回调函数。</p></li><li><p><code>console.log(&#39;world&#39;)</code> - 定时器的回调函数中，首先打印字符串 ‘world’ 到控制台。</p></li><li><p><code>resolve(&quot;nihao&quot;)</code>  然后调用 <code>resolve</code> 函数，并传递字符串 “nihao” 作为解决值。</p></li><li><p><code>&#125;, 2000)</code> -定时器函数设置为 2 秒后执行。</p></li><li><p><code>console.log(&#39;hello&#39;)</code> 立即执行，打印字符串 ‘hello’ 到控制台。</p></li><li><p><code>console.log(222)</code>  立即执行，打印数字 222 到控制台。</p></li><li><p><code>const res = await promise</code>  使用 <code>await</code> 关键字等待 <code>promise</code> 被解决。<code>await</code> 会暂停 <code>testAsync</code> 函数的执行，直到 <code>promise</code> 被解决。解决后，<code>res</code> 变量将被赋值为 “nihao”。</p></li><li><p><code>console.log(333)</code> 在 <code>await</code> 之后的代码，直接打印数字 333 到控制台。</p></li><li><p><code>return res</code> 函数返回 <code>promise</code> 解决后的值，即 “nihao”。</p></li><li><p><code>testAsync().then(res=&gt;console.log(res))</code> - 调用 <code>testAsync</code> 函数，并使用 <code>.then()</code> 方法来处理返回的 <code>Promise</code>。当 <code>testAsync</code> 函数解决时，<code>then</code> 方法中的回调函数会被调用，并打印 <code>res</code> 变量的值，即 “nihao”。</p></li></ol><p>执行顺序如下：</p><ol><li>打印 111。</li><li>打印 ‘hello’。</li><li>打印 222。</li><li>等待 2 秒（定时器延迟）。</li><li>打印 ‘world’。</li><li>打印 333。</li><li><code>testAsync</code> 函数解决，接收异步函数<code>testAsyncTest</code>的返回的res对象中的resovle值（相当于return?），触发 <code>.then()</code> 方法中的回调函数。</li><li>打印 “nihao”。</li></ol><p>注意，<code>await</code> 关键字只能在 <code>async</code> 函数内部使用，而且它会暂停函数的执行，直到 <code>Promise</code> 被解决或拒绝。在这个例子中，<code>await</code> 暂停了 <code>testAsync</code> 函数的执行，直到 <code>promise</code> 被解决。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]).map(<span class="function">(<span class="params">n,i</span>)=&gt;</span>i).forEach(<span class="function"><span class="params">i</span>=&gt;</span><span class="built_in">console</span>.log(i))</span><br></pre></td></tr></table></figure><ol><li><p><strong><code>([1,1,1,1,1,1,1])</code></strong> - 这是一个包含七个元素（全部为数字1）的数组。</p></li><li><p><strong><code>.map((n, i) =&gt; i)</code></strong> - <code>map</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一次提供的函数后的返回值。</p><ul><li><strong>参数</strong>：<ul><li><code>n</code>：当前元素的值。</li><li><code>i</code>：当前元素的索引。</li></ul></li><li><strong>返回值</strong>：函数返回的是当前元素的索引 <code>i</code>，而不是元素的值。</li></ul></li><li><p><strong><code>.forEach(i =&gt; console.log(i))</code></strong> - <code>forEach</code> 方法对数组的每个元素执行一次提供的函数。</p><ul><li><strong>参数</strong>：<code>i</code>，这是 <code>map</code> 方法返回的新数组中的每个元素（即原数组的索引）。</li><li><strong>操作</strong>：对于数组中的每个索引，执行 <code>console.log(i)</code>，即将每个索引打印到控制台。</li></ul></li></ol><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><ol><li><p><strong>创建数组</strong>：首先创建一个包含七个1的数组 <code>[1,1,1,1,1,1,1]</code>。</p></li><li><p><strong>调用 <code>map</code> 方法</strong>：</p><ul><li>遍历数组中的每个元素（1），并为每个元素调用函数 <code>(n, i) =&gt; i</code>。</li><li>这个函数返回的是元素的索引，而不是元素的值。</li><li>结果是一个新的数组 <code>[0, 1, 2, 3, 4, 5, 6]</code>，每个元素是原数组中相应元素的索引。</li></ul></li><li><p><strong>调用 <code>forEach</code> 方法</strong>：</p><ul><li>遍历由 <code>map</code> 方法返回的新数组 <code>[0, 1, 2, 3, 4, 5, 6]</code>。</li><li>对于这个新数组中的每个元素（即索引），执行 <code>console.log(i)</code>。</li><li>依次打印出 <code>0, 1, 2, 3, 4, 5, 6</code>。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Front HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
